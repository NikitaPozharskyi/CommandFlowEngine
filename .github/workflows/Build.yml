# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
  publish:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install jq
        run: sudo apt-get install jq

      - name: Determine next version
        id: get_version
        run: |
          PACKAGE_ID=CommandFlowEngine
          RESPONSE=$(curl -s https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/index.json)
          VERSIONS=$(echo "$RESPONSE" | jq -r '.versions // empty')
          
          if [ -z "$VERSIONS" ] || [ "$VERSIONS" = "null" ]; then
            echo "No previous versions found. Starting with 1.0.0."
            NEW_VERSION="1.0.0"
          else
            LATEST_VERSION=$(echo "$VERSIONS" | jq -r '.[-1]')
            echo "Latest version: $LATEST_VERSION"
            IFS='.' read -r major minor patch <<< "$LATEST_VERSION"
            NEW_VERSION="$major.$minor.$((patch + 1))"
            echo "Next version: $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Pack with new version
        run: dotnet pack --configuration Release /p:PackageVersion=${{ steps.get_version.outputs.new_version }}

      - name: Push NuGet package
        run: dotnet nuget push ./bin/Release/CommandFlowEngine.${{ steps.get_version.outputs.new_version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json